import { useEffect, useState } from "react";
import Card from "../components/Card";
import FormField from "../components/FormField";
import Loader from "../components/Loader";
import { Link } from "react-router-dom";
import { logo } from "../assets";
import { useNavigate } from "react-router-dom";

const RenderCards = ({ data }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }
  return;
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]);
  const [startingList, setStartingList] = useState([]);
  const [searchText, setSearchText] = useState("");
  const [user, setUser] = useState({});

  const navigate = useNavigate();

  const handleSearchChange = (e) => {
    setSearchText(e.target.value);
  };

  useEffect(() => {
    const searchResults = startingList.filter(
      (item) =>
        item.name.toLowerCase().startsWith(searchText.toLowerCase()) ||
        item.prompt.toLowerCase().startsWith(searchText.toLowerCase())
    );
    setAllPosts(searchResults);
  }, [searchText]);

  const logOut = () => {
    localStorage.removeItem("token");
    navigate("/log-in");
  };

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);
      try {
        const response = await fetch("http://localhost:8080/api/v1/post", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        if (response.ok) {
          const result = await response.json();
          setAllPosts(result.data.reverse());
          setStartingList(result.data);
          setUser(result.user);
          console.log(user);
        }
      } catch (error) {
        //localStorage.removeItem("token");
        console.log("Errorrrrr");
        alert(error);
      } finally {
        setLoading(false);
      }
    };
    fetchPosts();
  }, []);

  return (
    <>
      <header
        className="w-full flex justify-between items-center bg-white sm:px-8
          px-4 py-4 border-b border-b-[#e6ebf4]"
      >
        <Link to={"/"}>
          <img src={logo} alt="logo" className="w-28 object-contain" />
        </Link>

        {user.username ? (
          <div className="flex flex-row justify-between space-x-3">
            <div
              className="font-inter font-semibold bg-white text-black py-2 
        px-4 rounded-md"
            >
              Hi, {user.username}
            </div>
            <Link
              to={"/create-post"}
              className="font-inter font-semibold bg-green-500 text-white py-2 
          px-4 rounded-md hover:cursor-pointer hover:bg-green-700"
            >
              Create Post
            </Link>
            <button
              onClick={logOut}
              className="font-inter font-semibold bg-blue-500 text-white py-2 
        px-4 rounded-md hover:cursor-pointer hover:bg-blue-700"
            >
              Log Out
            </button>
          </div>
        ) : (
          <div className="flex flex-row justify-between space-x-3">
            <Link
              to={"/sign-up"}
              className="font-inter font-semibold bg-blue-500 text-white py-2 
          px-4 rounded-md hover:cursor-pointer hover:bg-blue-700"
            >
              Sign Up
            </Link>
            <Link
              to={"/log-in"}
              className="font-inter font-semibold bg-blue-500 text-white py-2 
          px-4 rounded-md hover:cursor-pointer hover:bg-blue-700"
            >
              Log In
            </Link>
          </div>
        )}
      </header>
      <main className="sm:p-8 px-4 py-8 w-full bg-[#f9fafe] min-h-[calc(100vh-73px)]">
        <section className="w-full mx-auto">
          <div>
            <h1 className="font-extrabold text-[#222328] text-center text-[32px]">
              The Community Showcase
            </h1>
            <p className="mt-2 text-[#666e75] text-[14px] text-center">
              Browse through a collection of imaginative and visually stunning
              images generated by DALL-E AI
            </p>
          </div>

          <div className="mt-10 flex items-center justify-center w-full">
            <div className="w-1/2">
              <FormField
                labelName=""
                type="text"
                name="text"
                placeholder="Search posts..."
                value={searchText}
                handleChange={handleSearchChange}
              />
            </div>
          </div>

          <div className="mt-5">
            {loading ? (
              <div className="flex justify-between items-center">
                <Loader />
              </div>
            ) : (
              <>
                {searchText && (
                  <h2 className="font-medium text-center text-gray-600 text-xl mb-3">
                    Showing Resuls for{" "}
                    <span className="text-[#222328] font-semibold">
                      {searchText}
                    </span>
                    :
                  </h2>
                )}

                {allPosts.length == 0 ? (
                  <h2 className="mt-5 text-center font-bold text-[#6469ff] text-xl uppercase">
                    {user.username
                      ? "No posts found"
                      : "Sign in to view and create images"}
                  </h2>
                ) : (
                  <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
                    <RenderCards data={allPosts} />
                  </div>
                )}
              </>
            )}
          </div>
        </section>
      </main>
    </>
  );
};

export default Home;
